//! `xmlhub_indexer_defaults` was supposed to be xmlhub specific but
//! is also covering application upgrades now. (TODO: clean up)
use std::sync::Arc;

use ahtml::{att, AId, HtmlAllocator, HtmlAllocatorPool, Node};
use anyhow::Result;
use lazy_static::lazy_static;

use crate::checkout_context::CheckoutContext;

pub const XMLHUB_BINARY_FILE_NAME: &str = "xmlhub";

/// Information on the Git checkout of the xmlhub repo; used
/// by xmlhub.rs
pub const XMLHUB_CHECKOUT: CheckoutContext<&str> = CheckoutContext {
    // This path is replaced with the BASE_PATH argument
    working_dir_path: ".",
    branch_name: "master",
    supposed_upstream_git_url: "git@cevo-git.ethz.ch:cevo-resources/xmlhub.git",
    supposed_upstream_web_url: "https://cevo-git.ethz.ch/cevo-resources/xmlhub",
    expected_sub_paths: &["attributes.md"],
};

/// Information on the Git checkout of the xmlhub-indexer repo; used
/// by both xmlhub.rs and make-release.rs
pub const SOURCE_CHECKOUT: CheckoutContext<&str> = CheckoutContext {
    // This path is only used by make-release.rs and
    // replaced with the program argument for xmlhub.rs
    working_dir_path: ".",
    branch_name: "master",
    supposed_upstream_git_url: "git@cevo-git.ethz.ch:cevo-resources/xmlhub-indexer.git",
    supposed_upstream_web_url: "https://cevo-git.ethz.ch/cevo-resources/xmlhub-indexer",
    expected_sub_paths: &["Cargo.toml", "src/bin/xmlhub.rs"],
};

/// Information on the Git checkout of the xmlhub-indexer-binaries repo; currently used
/// only by make-release.rs
pub const BINARIES_CHECKOUT: CheckoutContext<&str> = CheckoutContext {
    working_dir_path: "../xmlhub-indexer-binaries/",
    branch_name: "master",
    supposed_upstream_git_url: "git@cevo-git.ethz.ch:cevo-resources/xmlhub-indexer-binaries.git",
    supposed_upstream_web_url: "https://cevo-git.ethz.ch/cevo-resources/xmlhub-indexer-binaries",
    expected_sub_paths: &["macOS", "keys"],
};

/// The name of the command line program.
pub const PROGRAM_NAME: &str = XMLHUB_BINARY_FILE_NAME;

lazy_static! {
    pub static ref GENERATED_MESSAGE: String = format!(
        "auto-generated by {PROGRAM_NAME}, {}",
        SOURCE_CHECKOUT.supposed_upstream_web_url
    );
}

// `HtmlAllocator` is an allocator for HTML elements (it manages
// memory efficiently, and provides a method for each HTML element by
// its name, e.g. `html.p(...)` creates a `<p>...</p>`
// element). `HtmlAllocatorPool` is a pool of `HtmlAllocator` that
// re-uses those for performance. The number passed to `new` is the
// limit on the number of allocations an allocator allows (a safety
// feature to limit damage when dealing with attackers of web systems;
// irrelevant here, just choosing a number large enough.) Rust allows
// underscores in numbers to allow for better readability of large
// numbers. `lazy_static!` declares a global variable that is
// initialized on the first access.
lazy_static! {
    pub static ref HTML_ALLOCATOR_POOL: HtmlAllocatorPool = HtmlAllocatorPool::new(
        5_000_000, // allocation limit
        true, // verify HTML correctness
        Arc::new(format!("change the limit in {}:{}", file!(), line!()))
    );
}

/// Used afer a value for linking back to the index entry (similar to
/// linking back from a footnote)
pub const BACK_TO_INDEX_SYMBOL: &str = "â†‘";

/// Return the html code for loading the document symbol image
pub fn document_symbol(html: &HtmlAllocator) -> Result<AId<Node>> {
    /// The symbol to use in the index page for links to the original
    /// XML file.
    const DOCUMENT_SYMBOL_PATH: &str = ".index/document.svg";

    html.img(
        [
            att("src", DOCUMENT_SYMBOL_PATH),
            att("style", "vertical-align: -2px;"),
        ],
        [],
    )
}

pub const FILEINFO_PATH_BGCOLOR: &str = "#cec7f2";
pub const FILEINFO_METADATA_BGCOLOR: &str = "#e3e7ff";
pub const FILEINFO_WARNINGS_BGCOLOR: &str = "#f8e080";

/// CSS style information; only useful for the .html file, not
/// included in the .md file as GitLab will ignore it anyway when
/// formatting that file.
pub fn css_styles() -> String {
    [
        "
/* make sections/subsections stand out more */
h2 {
  margin-top: 40px;
}

h3 {
  border-bottom: 2px solid #407cd9;
  margin-top: 40px;
}

/* a TABLE */
.fileinfo {
  border-spacing: 0px;
  margin-bottom: 20px; /* should instead use a grid something so that fileinfo is reusable */
}
/* a TD */
.fileinfo_path {
  background-color: ",
        FILEINFO_PATH_BGCOLOR,
        ";
  font-weight: bold;
}
/* a TR */
.fileinfo_metadata {
  background-color: ",
        FILEINFO_METADATA_BGCOLOR,
        ";
}
/* a TD */
.metadata_key {
  vertical-align: top;
  text-align: right;
  font-style: italic;
  padding-right: 6px;
  padding-left: 2px;
  padding-top: 2px;
  padding-bottom: 2px;
}
/* a TD */
.metadata_value {
  padding: 2px;
}
.key_dl {
}
.key_dt {
  margin-top: 1.5em;
  margin-bottom: 0.8em;
}
.key_dd {
}
/* a STRONG */
.key {
}
/* a DIV */
.file_link {
}
",
    ]
    .join("")
}
